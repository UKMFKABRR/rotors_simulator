<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2016 Pavel Vechersky, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="techpod_X_flex">

   <!-- Global properties -->
   <xacro:property name="namespace" value="$(arg namespace)" />
   <xacro:property name="rotor_velocity_slowdown_sim" value="10" />
   <xacro:property name="flexing" value="true" />
   <xacro:property name="meshes_path" value="package://rotors_description/meshes/techpod_X_flex"/>
   <xacro:property name="yaml_path" value="$(arg yaml_path)" />
   <xacro:property name="serial_device" value="$(arg serial_device)" />
   <xacro:property name="enable_wind" value="$(arg enable_wind)"/>

   <!-- Constants -->
   <xacro:property name="PI" value="3.1415926535897931" />

   <!-- Component masses -->
   <xacro:property name="mass_fuselage" value="1.8" /><!-- [kg] -->
   <xacro:property name="mass_aileron" value="0.1" /><!-- [kg] -->
   <xacro:property name="mass_flap" value="0.1" /><!-- [kg] -->
   <xacro:property name="mass_elevator" value="0.1" /><!-- [kg] -->
   <xacro:property name="mass_rudder" value="0.1" /><!-- [kg] -->
   <xacro:property name="mass_propeller" value="0.01" /><!-- [kg] -->

   <!-- Main body properties -->
   <xacro:property name="body_length" value="1.088" /><!-- [m] -->
   <xacro:property name="body_width" value="2.591" /><!-- [m] -->
   <xacro:property name="body_height" value="0.303" /><!-- [m] -->
   <xacro:property name="body_color" value="White" />
   <xacro:property name="body_mesh_file" value="package://rotors_description/meshes/techpod/techpod_body.dae" />

   <!-- Aileron properties -->
   <xacro:property name="aileron_length" value="0.053" /><!-- [m] -->
   <xacro:property name="aileron_width" value="0.349" /><!-- [m] -->
   <xacro:property name="aileron_height" value="0.013" /><!-- [m] -->
   <xacro:property name="aileron_min_angle" value="-0.349066" /><!-- [rad] -->
   <xacro:property name="aileron_max_angle" value="0.349066" /><!-- [rad] -->
   <xacro:property name="aileron_color" value="${body_color}" />
   <xacro:property name="aileron_left_mesh_file" value="package://rotors_description/meshes/techpod/techpod_aileron_left.dae" />
   <xacro:property name="aileron_right_mesh_file" value="package://rotors_description/meshes/techpod/techpod_aileron_right.dae" />

   <!-- Elevator properties -->
   <xacro:property name="elevator_length" value="0.051" /><!-- [m] -->
   <xacro:property name="elevator_width" value="0.457" /><!-- [m] -->
   <xacro:property name="elevator_height" value="0.012" /><!-- [m] -->
   <xacro:property name="elevator_min_angle" value="-0.349066" /><!-- [rad] -->
   <xacro:property name="elevator_max_angle" value="0.349066" /><!-- [rad] -->
   <xacro:property name="elevator_color" value="${body_color}" />
   <xacro:property name="elevator_mesh_file" value="package://rotors_description/meshes/techpod/techpod_elevator.dae" />

   <!-- Flap properties -->
   <xacro:property name="flap_length" value="0.076" /><!-- [m] -->
   <xacro:property name="flap_width" value="0.459" /><!-- [m] -->
   <xacro:property name="flap_height" value="0.016" /><!-- [m] -->
   <xacro:property name="flap_min_angle" value="-0.349066" /><!-- [rad] -->
   <xacro:property name="flap_max_angle" value="0.349066" /><!-- [rad] -->
   <xacro:property name="flap_color" value="${body_color}" />
   <xacro:property name="flap_left_mesh_file" value="package://rotors_description/meshes/techpod/techpod_flap_left.dae" />
   <xacro:property name="flap_right_mesh_file" value="package://rotors_description/meshes/techpod/techpod_flap_right.dae" />

   <!-- Rudder properties -->
   <xacro:property name="rudder_length" value="0.129" />
   <xacro:property name="rudder_width" value="0.018" />
   <xacro:property name="rudder_height" value="0.241" />
   <xacro:property name="rudder_min_angle" value="-0.349066" />
   <xacro:property name="rudder_max_angle" value="0.349066" />
   <xacro:property name="rudder_color" value="Red" />
   <xacro:property name="rudder_mesh_file" value="package://rotors_description/meshes/techpod/techpod_rudder.dae" />

   <!-- Propeller properties -->
   <xacro:property name="propeller_direction" value="cw" />
   <xacro:property name="propeller_radius" value="0.1" />
   <xacro:property name="propeller_height" value="0.003" />
   <xacro:property name="propeller_color" value="Gray" />
   <xacro:property name="propeller_mesh_file" value="package://rotors_description/meshes/propeller_${propeller_direction}.dae" />

   <!-- Flexing properties -->
   <xacro:property name="k1" value="250" />
   <xacro:property name="d1" value="2" />
   <xacro:property name="k2" value="120" />
   <xacro:property name="d2" value="1.0" />
   <xacro:property name="k3" value="30" />
   <xacro:property name="d3" value="0.7" />
   <xacro:property name="k4" value="80" />
   <xacro:property name="d4" value="1.2" />

   <!-- Inertia of the main body -->
   <xacro:property name="body_inertia">
      <inertia ixx="0.16632" ixy="0.0" ixz="0.0755" iyy="0.3899" iyz="0.0" izz="0.5243" />
   </xacro:property>

   <!-- Inertia of the aileron, assuming it is a cuboid -->
   <xacro:property name="aileron_inertia">
      <xacro:box_inertia x="${aileron_length}" y="${aileron_width}" z="${aileron_height}" mass="${mass_aileron}" />
   </xacro:property>

   <!-- Inertia of the elevator, assuming it is a cuboid -->
   <xacro:property name="elevator_inertia">
      <xacro:box_inertia x="${elevator_length}" y="${elevator_width}" z="${elevator_height}" mass="${mass_elevator}" />
   </xacro:property>

   <!-- Inertia of the flap, assuming it is a cuboid -->
   <xacro:property name="flap_inertia">
      <xacro:box_inertia x="${flap_length}" y="${flap_width}" z="${flap_height}" mass="${mass_flap}" />
   </xacro:property>

   <!-- Inertia of the rudder, assuming it is a cuboid -->
   <xacro:property name="rudder_inertia">
      <xacro:box_inertia x="${rudder_length}" y="${rudder_width}" z="${rudder_height}" mass="${mass_rudder}" />
   </xacro:property>

   <!-- Inertia of the propeller, assuming it is a cylinder -->
   <xacro:property name="propeller_inertia">
      <xacro:cylinder_inertia r="${propeller_radius}" h="${propeller_height}" mass="${mass_propeller*rotor_velocity_slowdown_sim}" />
   </xacro:property>

   <!-- Include URDF files -->
   <xacro:include filename="$(find rotors_description)/urdf/fixed_wing_X_base.xacro" />
   <xacro:include filename="$(find rotors_description)/urdf/rope.xacro" />

   <!-- Instantiate fixed_wing_base_macro once and adding fuselage parts -->
   <xacro:fixed_wing_base_macro robot_namespace="${namespace}"
      mass="${mass_fuselage}"
      length="${body_length}"
      width="0.2"
      height="${body_height}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="package://rotors_description/meshes/techpod_X_flex/fuselage_barless.stl">
      <origin xyz="0.10 0 0.08" rpy="0 0 0" />
      <xacro:insert_block name="body_inertia" />
   </xacro:fixed_wing_base_macro>
   <joint name="${namespace}/dome_joint" type="fixed">
      <parent link="${namespace}/base_link" />
      <child link="${namespace}/dome" />
   </joint>
   <link name="${namespace}/dome">
      <inertial>
         <mass value="0.001" />
         <xacro:box_inertia x="0.001" y="0.001" z="0.001" mass="0.001" />
      </inertial>
      <visual>
         <geometry>
            <mesh filename="package://rotors_description/meshes/techpod_X_flex/dome.stl" scale="1 1 1" />
         </geometry>
      </visual>
   </link>
   <gazebo reference="${namespace}/dome">
      <material>Gazebo/GreyTransparent</material>
   </gazebo>
   <joint name="${namespace}/bar_joint" type="fixed">
      <parent link="${namespace}/base_link" />
      <child link="${namespace}/bar" />
   </joint>
   <link name="${namespace}/bar">
      <inertial>
         <mass value="0.001" />
         <xacro:box_inertia x="0.001" y="0.001" z="0.001" mass="0.001" />
      </inertial>
      <visual>
         <geometry>
            <mesh filename="package://rotors_description/meshes/techpod_X_flex/bar.stl" scale="1 1 1" />
         </geometry>
      </visual>
   </link>
   <gazebo reference="${namespace}/bar">
      <material>Gazebo/Grey</material>
   </gazebo>
   <joint name="${namespace}/cover" type="fixed">
      <parent link="${namespace}/base_link" />
      <child link="${namespace}/cover" />
   </joint>
   <link name="${namespace}/cover">
      <inertial>
         <mass value="0.001" />
         <xacro:box_inertia x="0.001" y="0.001" z="0.001" mass="0.001" />
      </inertial>
      <visual>
         <geometry>
            <mesh filename="package://rotors_description/meshes/techpod_X_flex/cover_hole.stl" scale="1 1 1" />
         </geometry>
      </visual>
   </link>
   <gazebo reference="${namespace}/cover">
      <material>Gazebo/White</material>
   </gazebo>
   <joint name="${namespace}/motor_joint" type="fixed">
      <parent link="${namespace}/base_link" />
      <child link="${namespace}/motor" />
   </joint>
   <link name="${namespace}/motor">
      <inertial>
         <mass value="0.001" />
         <xacro:box_inertia x="0.001" y="0.001" z="0.001" mass="0.001" />
      </inertial>
      <visual>
         <geometry>
            <mesh filename="package://rotors_description/meshes/techpod_X_flex/motor.stl" scale="1 1 1" />
         </geometry>
      </visual>
   </link>
   <gazebo reference="${namespace}/motor">
      <material>Gazebo/Black</material>
   </gazebo>

   <!-- Instantiate (flexing) wing segments -->
   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="wl_1"
      parent="${namespace}/base_link"
      mass_segment="0.15"
      do_flex="${flexing}"
      k="${k1}"
      c="${d1}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/wing_l_1.stl"
      segment_length="0.1"
      segment_width="0.4"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="0 0 0.162" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0.195 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0 0 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/wl_1</linkName>
         <aeroForcesVis>aero_force_vis_wl1</aeroForcesVis>
         <airfoil>
            <segment name="WL1_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 0.1 0</cp>
               <seg_area>0.016</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </segment>
            <segment name="WL1_2">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.0 0.28 0</cp>
               <seg_area>0.032</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <control>
                  <cs name="flap_left">
                     <controlJoint>${namespace}/flap_left_1_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>flap_l1_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="wr_1"
      parent="${namespace}/base_link"
      mass_segment="0.15"
      do_flex="${flexing}"
      k="${k1}"
      c="${d1}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/wing_r_1.stl"
      segment_length="0.1"
      segment_width="0.4"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="0 0 0.162" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 -0.195 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0 0 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/wr_1</linkName>
         <aeroForcesVis>aero_force_vis_wr1</aeroForcesVis>
         <airfoil>
            <segment name="WR1_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 -0.1 0</cp>
               <seg_area>0.016</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </segment>
            <segment name="WR1_2">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.0 -0.28 0</cp>
               <seg_area>0.032</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <control>
                  <cs name="flap_right">
                     <controlJoint>${namespace}/flap_right_1_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>flap_r1_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="wl_2"
      parent="${namespace}/wl_1"
      mass_segment="0.1"
      do_flex="${flexing}"
      k="${k2}"
      c="${d2}"
      color="Red"
      use_mesh_file="true"
      mesh_file="${meshes_path}/wing_l_2.stl"
      segment_length="0.1"
      segment_width="0.43"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="0 0.39 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0.215 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0 -0.39 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/wl_2</linkName>
         <aeroForcesVis>aero_force_vis_wl2</aeroForcesVis>
         <airfoil>
            <segment name="WL2_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 0.1 0</cp>
               <seg_area>0.032</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <control>
                  <cs name="flap_left">
                     <controlJoint>${namespace}/flap_left_2_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>flap_l2_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
            <segment name="WL2_2">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.0 0.32 0</cp>
               <seg_area>0.032</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="wr_2"
      parent="${namespace}/wr_1"
      mass_segment="0.1"
      do_flex="${flexing}"
      k="${k2}"
      c="${d2}"
      color="Red"
      use_mesh_file="true"
      mesh_file="${meshes_path}/wing_r_2.stl"
      segment_length="0.1"
      segment_width="0.43"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="0 -0.39 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 -0.215 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0 0.39 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/wr_2</linkName>
         <aeroForcesVis>aero_force_vis_wr2</aeroForcesVis>
         <airfoil>
            <segment name="WR2_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 -0.1 0</cp>
               <seg_area>0.032</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <control>
                  <cs name="flap_right">
                     <controlJoint>${namespace}/flap_right_2_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>flap_r2_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
            <segment name="WR2_2">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.0 -0.32 0</cp>
               <seg_area>0.032</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="wl_3"
      parent="${namespace}/wl_2"
      mass_segment="0.1"
      do_flex="${flexing}"
      k="${k3}"
      c="${d3}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/wing_l_3.stl"
      segment_length="0.1"
      segment_width="0.5"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="0 0.43 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0.25 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0 -0.82 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/wl_3</linkName>
         <aeroForcesVis>aero_force_vis_wl3</aeroForcesVis>
         <airfoil>
            <segment name="WL3_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 0.2 0</cp>
               <seg_area>0.05</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <control>
                  <cs name="aileron_left">
                     <controlJoint>${namespace}/aileron_left_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>ail_l_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
            <segment name="WL3_2">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.0 0.4 0</cp>
               <seg_area>0.016</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="wr_3"
      parent="${namespace}/wr_2"
      mass_segment="0.1"
      do_flex="${flexing}"
      k="${k3}"
      c="${d3}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/wing_r_3.stl"
      segment_length="0.1"
      segment_width="0.5"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="0 -0.43 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 -0.25 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0 0.82 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/wr_3</linkName>
         <aeroForcesVis>aero_force_vis_wr3</aeroForcesVis>
         <airfoil>
            <segment name="WR3_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 -0.2 0</cp>
               <seg_area>0.05</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <control>
                  <cs name="aileron_right">
                     <controlJoint>${namespace}/aileron_right_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>ail_r_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
            <segment name="WR3_2">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.0 -0.4 0</cp>
               <seg_area>0.016</seg_area>
               <seg_chord>0.16</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="vs"
      parent="${namespace}/base_link"
      mass_segment="0.15"
      do_flex="${flexing}"
      k="${k4}"
      c="${d4}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/v_stb.stl"
      segment_length="0.1"
      segment_width="0.02"
      segment_height="0.3">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="-0.618 0 0.031" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0.15" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.618 0 -0.031" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/vs</linkName>
         <aeroForcesVis>aero_force_vis_vs</aeroForcesVis>
         <airfoil>
            <segment name="vs">
               <forward>1 0 0</forward>
               <upward>0 -1 0</upward>
               <cp>-0.02 0.0 0.13</cp>
               <seg_area>0.03</seg_area>
               <seg_chord>0.12</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test_2.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <indVel name="prop0">
                  <topic>prop_slpstr_0</topic>
               </indVel>
               <control>
                  <cs name="rudder">
                     <controlJoint>${namespace}/rudder_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>rudd_pos</csRefTopic>
                     <radToCLift>3</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <xacro:airfoil_segment robot_namespace="${namespace}"
      segment_name="hs"
      parent="${namespace}/vs"
      mass_segment="0.15"
      do_flex="${flexing}"
      k="${k4}"
      c="${d4}"
      color="${body_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/h_stb.stl"
      segment_length="0.1"
      segment_width="0.4"
      segment_height="0.02">
      <axis xyz="1 0 0" /><!-- Joint axis -->
      <origin xyz="-0.039 0 0.274" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="-0.03 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.657 0 -0.305" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:airfoil_segment>

   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/hs</linkName>
         <aeroForcesVis>aero_force_vis_hs</aeroForcesVis>
         <airfoil>
            <segment name="HSL_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 0.125 0</cp>
               <seg_area>0.03</seg_area>
               <seg_chord>0.12</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test_2.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <indVel name="prop0">
                  <topic>prop_slpstr_0</topic>
               </indVel>
               <control>
                  <cs name="elevator_left">
                     <controlJoint>${namespace}/elevator_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>elev_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
            <segment name="HSR_1">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0 -0.125 0</cp>
               <seg_area>0.03</seg_area>
               <seg_chord>0.12</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test_2.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
               <indVel name="prop0">
                  <topic>prop_slpstr_0</topic>
               </indVel>
               <control>
                  <cs name="elevator_right">
                     <controlJoint>${namespace}/elevator_joint</controlJoint>
                     <fromTopic>true</fromTopic>
                     <csRefTopic>elev_pos</csRefTopic>
                     <radToCLift>2</radToCLift>
                     <radToCDrag>0.0</radToCDrag>
                     <radToCPitch>0.0</radToCPitch>
                  </cs>
               </control>
            </segment>
         </airfoil>
      </plugin>
   </gazebo>

   <!-- Instantiate the ailerons -->
   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="aileron_left"
      parent="${namespace}/wl_3"
      mass_surface="${mass_aileron}"
      min_angle="${aileron_min_angle}"
      max_angle="${aileron_max_angle}"
      color="${aileron_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/ail_l.stl"
      surface_length="${aileron_length}"
      surface_width="${aileron_width}"
      surface_height="${aileron_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.062 0.2 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.062 -1.02 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:control_surface>

   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="aileron_right"
      parent="${namespace}/wr_3"
      mass_surface="${mass_aileron}"
      min_angle="${aileron_min_angle}"
      max_angle="${aileron_max_angle}"
      color="${aileron_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/ail_r.stl"
      surface_length="${aileron_length}"
      surface_width="${aileron_width}"
      surface_height="${aileron_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.062 -0.2 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.062 1.02 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="aileron_inertia" />
   </xacro:control_surface>

   <!-- Instantiate the flaps -->
   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="flap_left_1"
      parent="${namespace}/wl_1"
      mass_surface="${mass_flap}"
      min_angle="${flap_min_angle}"
      max_angle="${flap_max_angle}"
      color="${flap_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/flp_l_1.stl"
      surface_length="${flap_length}"
      surface_width="${flap_width}"
      surface_height="${flap_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.062 0.282 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.062 -0.282 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="flap_inertia" />
   </xacro:control_surface>

   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="flap_left_2"
      parent="${namespace}/wl_2"
      mass_surface="${mass_flap}"
      min_angle="${flap_min_angle}"
      max_angle="${flap_max_angle}"
      color="Red" use_mesh_file="true"
      mesh_file="${meshes_path}/flp_l_2.stl"
      surface_length="${flap_length}"
      surface_width="${flap_width}"
      surface_height="${flap_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.062 0.109 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.062 -0.499 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="flap_inertia" />
   </xacro:control_surface>

   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="flap_right_1"
      parent="${namespace}/wr_1"
      mass_surface="${mass_flap}"
      min_angle="${flap_min_angle}"
      max_angle="${flap_max_angle}"
      color="${flap_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/flp_r_1.stl"
      surface_length="${flap_length}"
      surface_width="${flap_width}"
      surface_height="${flap_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.062 -0.282 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.062 0.282 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="flap_inertia" />
   </xacro:control_surface>

   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="flap_right_2"
      parent="${namespace}/wr_2"
      mass_surface="${mass_flap}"
      min_angle="${flap_min_angle}"
      max_angle="${flap_max_angle}"
      color="Red"
      use_mesh_file="true"
      mesh_file="${meshes_path}/flp_r_2.stl"
      surface_length="${flap_length}"
      surface_width="${flap_width}"
      surface_height="${flap_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.062 -0.109 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.062 0.499 -0.162" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="flap_inertia" />
   </xacro:control_surface>

   <!-- Instantiate the elevator/rudder -->
   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="elevator"
      parent="${namespace}/hs"
      mass_surface="${mass_elevator}"
      min_angle="${elevator_min_angle}"
      max_angle="${elevator_max_angle}"
      color="${elevator_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/elev.stl"
      surface_length="${elevator_length}"
      surface_width="${elevator_width}"
      surface_height="${elevator_height}">
      <axis xyz="0 -1 0" /><!-- Joint axis -->
      <origin xyz="-0.078 0 0" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.735 0 -0.305" rpy="0 0 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="elevator_inertia" />
   </xacro:control_surface>

   <xacro:control_surface robot_namespace="${namespace}"
      surface_name="rudder"
      parent="${namespace}/vs"
      mass_surface="${mass_rudder}"
      min_angle="${rudder_min_angle}"
      max_angle="${rudder_max_angle}"
      color="${rudder_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/rudd.stl"
      surface_length="0.1"
      surface_width="0.1"
      surface_height="0.1">
      <axis xyz="0 0 -1" /><!-- Joint axis -->
      <origin xyz="0.041 0 -0.031" rpy="0 -0.3 0" /><!-- Joint origin -->
      <origin xyz="-0.05 0 0.12" rpy="0 0 0" /><!-- Inertia origin -->
      <origin xyz="0.551 0 -0.1705" rpy="0 0.3 0" /><!-- Visuals/Collision origin -->
      <xacro:insert_block name="rudder_inertia" />
   </xacro:control_surface>

   <!-- Instantiate the propeller -->
   <xacro:propeller robot_namespace="${namespace}"
      suffix="P0"
      parent="${namespace}/base_link"
      mass_propeller="${mass_propeller}"
      propeller_radius="${propeller_radius}"
      color="${propeller_color}"
      use_mesh_file="true"
      mesh_file="${meshes_path}/prop.stl">
      <origin xyz="-0.1672 0 0.1955" rpy="0 ${-0.5*PI} 0" />
      <origin xyz="-0.1955 0 -0.1672" rpy="0 ${0.5*PI} 0" />
      <xacro:insert_block name="propeller_inertia" />
   </xacro:propeller>

   <gazebo>
      <plugin filename="librotors_gazebo_propulsion_plugin.so" name="propulsion_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <prop name="P0">
            <jointName>${namespace}/propeller_P0_joint</jointName>
            <linkNameParent>${namespace}/base_link</linkNameParent>
            <cp>-0.1672 0 0.1955</cp>
            <axisPosRot>-1 0.0 0.1</axisPosRot>
            <turnDir>cw</turnDir>
            <speedRefTopic>prop_ref_0</speedRefTopic>
            <propParamsYAML>${yaml_path}/propeller_test.yaml</propParamsYAML>
            <slpstrTopic>prop_slpstr_0</slpstrTopic>
            <visTopic>prop_vis_0</visTopic>
            <wind name="wind">
              <topic>wind_base_link</topic>
            </wind>
         </prop>
      </plugin>
   </gazebo>

   <!-- Fuselage aerodynamics -->
   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/base_link</linkName>
         <aeroForcesVis>aero_force_vis_0</aeroForcesVis>
         <body>
            <element>
               <aBdyXX>0.02</aBdyXX>
               <aBdyYY>0.07</aBdyYY>
               <aBdyZZ>0.04</aBdyZZ>
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>0.2 0.0 0.05</cp>
               <wind name="wind">
                 <topic>wind_base_link</topic>
               </wind>
            </element>
         </body>
      </plugin>
   </gazebo>

   <!-- Flow angle vanes -->
   <xacro:angle_vane robot_namespace="${namespace}"
      vane_name="alpha_1"
      type="alpha"
      chord="0.02"
      arm_cp="0.05"
      mass_vane="0.02"
      parent="${namespace}/wl_1"
      wind_topic="wind_base_link"
      color="Grey"
      mesh_file="package://rotors_description/meshes/techpod_X_flex/flp_l_1.stl">
      <origin xyz="0.15 0.35 0.05" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- vis_coll origin -->
      <xacro:box_inertia x="0.1" y="0.02" z="0.02" mass="0.02" />
   </xacro:angle_vane>

   <xacro:angle_vane robot_namespace="${namespace}"
      vane_name="beta_1"
      type="beta"
      chord="0.02"
      arm_cp="0.05"
      mass_vane="0.02"
      parent="${namespace}/wr_1"
      wind_topic="wind_base_link"
      color="Grey"
      mesh_file="package://rotors_description/meshes/techpod_X_flex/flp_l_1.stl">
      <origin xyz="0.15 -0.35 0.05" rpy="0 0 0" /><!-- Joint origin -->
      <origin xyz="0 0 0" rpy="0 0 0" /><!-- vis_coll origin -->
      <xacro:box_inertia x="0.1" y="0.02" z="0.02" mass="0.02" />
   </xacro:angle_vane>

   <gazebo>
      <plugin filename="librotors_gazebo_vane_plugin.so" name="beta_1_vane_plugin">
        <robotNamespace>${namespace}</robotNamespace>
        <alphaJoint>${namespace}/alpha_1_joint</alphaJoint>
        <betaJoint>${namespace}/beta_1_joint</betaJoint>
        <vaneTopic>vanes</vaneTopic>
      </plugin>
   </gazebo>

   <xacro:if value="${enable_wind}">
     <gazebo>
       <plugin filename="librotors_gazebo_wind_beta_plugin.so" name="wind_beta_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <windLayer>
           <layer name="layer1">
             <altitude>10</altitude>
             <windMeanNED>-5 0 0</windMeanNED>
           </layer>
           <layer name="layer2">
             <altitude>25</altitude>
             <windMeanNED>-6 0 0</windMeanNED>
           </layer>
           <layer name="layer3">
             <altitude>35</altitude>
             <windMeanNED>-10 0 0</windMeanNED>
           </layer>
         </windLayer>
         <findWind>
           <query name="q1">
             <linkName>${namespace}/base_link</linkName>
             <windTopic>wind_base_link</windTopic>
           </query>
           <!--
           <query name="q2">
             <linkName>${namespace}/payload_1</linkName>
             <windTopic>wind_payload</windTopic>
           </query>
           -->
         </findWind>
         <lambdaMin>2</lambdaMin>
         <lengthScale>725</lengthScale>
         <fourierNNN>10 10 10</fourierNNN>
         <sigma>5</sigma>
         <trnspVelTurbNED>-5 0 0</trnspVelTurbNED>
       </plugin>
     </gazebo>
   </xacro:if>

   <!-- Tracing ribbon/Visual plugin -->

   <gazebo reference="${namespace}/base_link">
      <visual>
         <plugin name="visual_plugin_base_link" filename="librotors_gazebo_template_visual_plugin.so" />
      </visual>
   </gazebo>
   <!---->

   <!-- Payload -->
   <!--
   <link name="${namespace}/payload_1">
      <inertial>
         <origin xyz="0.07 0 0" rpy="0 0 0" />
         <mass value="0.25" />
         <xacro:sphere_inertia r="0.05" mass="0.25" />
      </inertial>
      <visual>
         <origin xyz="0.07 0 0" rpy="0 0 0" />
         <geometry>
            <mesh filename="package://rotors_description/meshes/payloads/payload.stl" scale="0.012 0.012 0.012" />
         </geometry>
      </visual>
      <collision>
         <origin xyz="0.01 0 0" rpy="0 0 0" />
         <geometry>
            <box size = "0.25 0.12 0.05" />
         </geometry>
      </collision>
   </link>
   <joint name="${namespace}/payload_1_joint" type="floating">
      <parent link="${namespace}/wl_2" />
      <child link="${namespace}/payload_1" />
      <origin xyz="0 0 0" rpy="0 0 0" />
   </joint>
   <gazebo reference="${namespace}/payload_1">
      <visual>
         <plugin name="visual_plugin_payload_1" filename="librotors_gazebo_template_visual_plugin.so" />
      </visual>
      <material>Gazebo/Orange</material>
      <mu1>0.2</mu1>
      <mu2>0.2</mu2>
      <kp>10000</kp>
      <kd>1</kd>
   </gazebo>
   <gazebo>
      <plugin filename="librotors_gazebo_payload_plugin.so" name="payload_plugin_1">
         <robotNamespace>${namespace}</robotNamespace>
         <joint>${namespace}/payload_1_joint</joint>
         <payload>${namespace}/payload_1</payload>
         <parent>${namespace}/wl_2</parent>
         <hoistPosParent>0 -0.15 -0.04</hoistPosParent>
         <hoistPosPayload>0 0 0</hoistPosPayload>
         <dropTopic>drop_1</dropTopic>
      </plugin>
   </gazebo>
   <gazebo>
      <plugin filename="librotors_gazebo_aerodynamics_plugin.so" name="aerodynamics_plugin">
         <robotNamespace>${namespace}</robotNamespace>
         <linkName>${namespace}/payload_1</linkName>
         <aeroForcesVis>aero_force_vis_payload_1</aeroForcesVis>
         <airfoil>
            <segment name="HS">
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>-0.15 0 0</cp>
               <seg_area>0.005</seg_area>
               <seg_chord>0.05</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test_2.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_payload</topic>
               </wind>
            </segment>
            <segment name="VS">
               <forward>1 0 0</forward>
               <upward>0 -1 0</upward>
               <cp>-0.15 0 0</cp>
               <seg_area>0.005</seg_area>
               <seg_chord>0.05</seg_chord>
               <aeroParamsYAML>${yaml_path}/airfoil_test_2.yaml</aeroParamsYAML>
               <wind name="wind">
                 <topic>wind_payload</topic>
               </wind>
            </segment>
         </airfoil>
         <body>
            <element>
               <aBdyXX>0.0028</aBdyXX>
               <aBdyYY>0.015</aBdyYY>
               <aBdyZZ>0.015</aBdyZZ>
               <forward>1 0 0</forward>
               <upward>0 0 1</upward>
               <cp>-0.05 0.0 0</cp>
               <wind name="wind">
                 <topic>wind_payload</topic>
               </wind>
            </element>
         </body>
      </plugin>
   </gazebo>
   -->

   <!-- Payload on rope -->
   <!--
   <xacro:rope n="20"
      length="10"
      dia="0.01"
      mass="0.05"
      damping="10"
      parent="${namespace}/base_link"
      color="Red">
      <origin xyz="-0.15 0 0.02" rpy="0 -1.57 0" />
   </xacro:rope>
   -->

   <!-- Mavlink interface -->
   <gazebo>
      <plugin filename="librotors_gazebo_mavlink_interface.so" name="gazebo_mavlink_interface">
         <robotNamespace>${namespace}</robotNamespace>
         <protocol_version>2.0</protocol_version>
         <imuSubTopic>/imu</imuSubTopic>
         <imu_rate>250</imu_rate>
         <gpsSubTopic>/gps</gpsSubTopic>
         <gpsGtSubTopic>/gps_gt</gpsGtSubTopic>
         <lidarSubTopic />
         <opticalFlowSubTopic />
         <vaneSubTopic>/vanes</vaneSubTopic>
         <mavlink_addr>INADDR_ANY</mavlink_addr>
         <mavlink_udp_port>14560</mavlink_udp_port>
         <serialEnabled>true</serialEnabled>
         <serialDevice>${serial_device}</serialDevice>
         <baudRate>921600</baudRate>
         <qgc_addr>INADDR_ANY</qgc_addr>
         <qgc_udp_port>14550</qgc_udp_port>
         <hil_mode>true</hil_mode>
         <hil_state_level>false</hil_state_level>
         <enable_lockstep>false</enable_lockstep>
         <use_tcp>false</use_tcp>
         <motorSpeedCommandPubTopic>/command/motor_speed_old</motorSpeedCommandPubTopic>
         <actuatorsPubTopic>/command/motor_speed</actuatorsPubTopic>
         <linkName>${namespace}/base_link</linkName> <!-- reference link frame for airspeed and baro alt-->
         <pitotPos>0.54 0 0.184</pitotPos>           <!-- pitot position wrt reference link -->
         <baroPos>0.14 0.0 0.07</baroPos>            <!-- baro position wrt reference link -->
         <wind name="wind">                          <!-- include wind in airspeed measurement -->
           <topic>wind_base_link</topic>
         </wind>
         <control_channels>
            <channel name="propeller">
               <input_index>4</input_index>
               <input_offset>1</input_offset>
               <input_scaling>466</input_scaling><!-- max_vel/2  [rad/s]-->
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>gz_msg</joint_control_type>
               <gztopic>prop_ref_0</gztopic>
            </channel>
            <channel name="aileron_left">
               <input_index>0</input_index>
               <input_offset>0</input_offset>
               <input_scaling>0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/aileron_left_joint</joint_name>
               <gztopic>ail_l_pos</gztopic>
            </channel>
            <channel name="aileron_right">
               <input_index>0</input_index>
               <input_offset>0</input_offset>
               <input_scaling>-0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/aileron_right_joint</joint_name>
               <gztopic>ail_r_pos</gztopic>
            </channel>
            <channel name="elevator">
               <input_index>2</input_index>
               <input_offset>0</input_offset>
               <input_scaling>0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/elevator_joint</joint_name>
               <gztopic>elev_pos</gztopic>
            </channel>
            <channel name="rudder">
               <input_index>3</input_index>
               <input_offset>-0.5</input_offset>
               <input_scaling>-0.6</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/rudder_joint</joint_name>
               <gztopic>rudd_pos</gztopic>
            </channel>
            <channel name="flap_left_1">
               <input_index>5</input_index>
               <input_offset>0</input_offset>
               <input_scaling>0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/flap_left_1_joint</joint_name>
               <gztopic>flap_l1_pos</gztopic>
            </channel>
            <channel name="flap_left_2">
               <input_index>5</input_index>
               <input_offset>0</input_offset>
               <input_scaling>0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/flap_left_2_joint</joint_name>
               <gztopic>flap_l2_pos</gztopic>
            </channel>
            <channel name="flap_right_1">
               <input_index>5</input_index>
               <input_offset>0</input_offset>
               <input_scaling>0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/flap_right_1_joint</joint_name>
               <gztopic>flap_r1_pos</gztopic>
            </channel>
            <channel name="flap_right_2">
               <input_index>5</input_index>
               <input_offset>0</input_offset>
               <input_scaling>0.3</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>servo</joint_control_type>
               <joint_name>${namespace}/flap_right_2_joint</joint_name>
               <gztopic>flap_r2_pos</gztopic>
            </channel>
            <channel name="payload">
               <input_index>8</input_index>
               <input_offset>0</input_offset>
               <input_scaling>1</input_scaling>
               <zero_position_disarmed>0</zero_position_disarmed>
               <zero_position_armed>0</zero_position_armed>
               <joint_control_type>gz_msg</joint_control_type>
               <gztopic>drop_1</gztopic>
            </channel>
         </control_channels>
      </plugin>
   </gazebo>
</robot>
